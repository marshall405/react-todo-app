{"version":3,"sources":["ToDo.js","ToDoList.js","App.js","index.js"],"names":["ToDo","todo","toggleTodo","customCheckBox","useRef","className","onClick","id","ref","complete","name","ToDoList","todos","selectAll","isChecked","length","map","key","App","useState","setTodos","changeChecked","showClearButton","changeClearButton","todoNameRef","handleAddTodo","current","value","prevTodos","Math","random","useEffect","storedTodos","JSON","parse","localStorage","getItem","setItem","stringify","anyCompletedItems","find","type","placeholder","onKeyDown","event","keyCode","clearedTodos","filter","newTodos","completeAllTodos","forEach","ReactDOM","render","document","getElementById"],"mappings":"yLAEe,SAASA,EAAT,GAAqC,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,WAC3BC,EAAiBC,mBAKvB,OACI,yBAAKC,UAAU,YAAYC,QAJ/B,WACIJ,EAAWD,EAAKM,MAKZ,yBAAKC,IAAKL,EAAgBE,UAAU,kBAC/BJ,EAAKQ,SAAW,SAAW,MAEhC,2BAAOJ,UAAWJ,EAAKQ,SAAW,YAAc,MAE3CR,EAAKS,OCdP,SAASC,EAAT,GAAgE,IAA5CC,EAA2C,EAA3CA,MAAOV,EAAoC,EAApCA,WAAYW,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,UACvDX,EAAiBC,mBACvB,OACI,oCACI,yBAAKC,UAAU,8BACX,yBAAKG,IAAKL,EAAgBE,UAAWO,EAAMG,OAAS,EAAI,iBAAmB,OAAQT,QAASO,GACvFC,EAAY,SAAW,MAE5B,yCAEJ,yBAAKT,UAAU,kBAEPO,EAAMI,KAAI,SAAAf,GACN,OAAO,kBAACD,EAAD,CAAMiB,IAAKhB,EAAKM,GAAIN,KAAMA,EAAMC,WAAYA,S,MC4E5DgB,MAlFf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNP,EADM,KACCQ,EADD,OAEsBD,oBAAS,GAF/B,mBAENL,EAFM,KAEKO,EAFL,OAGgCF,oBAAS,GAHzC,mBAGNG,EAHM,KAGWC,EAHX,KAIPC,EAAcpB,mBAmBpB,SAASqB,IAEP,IAAMf,EAAOc,EAAYE,QAAQC,MACpB,KAATjB,IACJU,GAAS,SAAAQ,GACP,MAAM,GAAN,mBAAWA,GAAX,CAAsB,CACpBrB,GA/BCsB,KAAKC,SAgCNpB,KAAMA,EACND,UAAU,QAGde,EAAYE,QAAQC,MAAQ,IAkC9B,OA9DAI,qBAAU,WAER,IAAMC,EAAcC,KAAKC,MAAMC,aAAaC,QAZtB,cAalBJ,GAAaZ,EAASY,KACzB,IAEHD,qBAAU,WAERI,aAAaE,QAlBS,YAkBkBJ,KAAKK,UAAU1B,IACvD,IAAM2B,EAAoB3B,EAAM4B,MAAK,SAAAvC,GAAI,OAAIA,EAAKQ,YAEhDc,IADEgB,KAKH,CAAC3B,IAgDF,yBAAKP,UAAU,OACb,2BAAOG,IAAKgB,EAAaiB,KAAK,OAAOC,YAAY,WAAWC,UAlChE,SAAmBC,GAEK,KAAlBA,EAAMC,SACRpB,OAgCA,yBAAKpB,UAAU,oBACb,4BAAQC,QAASmB,GAAjB,YACCH,EAAkB,4BAAQhB,QAvBjC,WACE,IAAMwC,EAAelC,EAAMmC,QAAO,SAAA9C,GAAI,OAAKA,EAAKQ,YAChDY,GAAc,GACdD,EAAS0B,KAoBc,oBAAkE,MAEvF,yBAAKzC,UAAU,eAAeO,EAAMG,OAApC,UACA,kBAACJ,EAAD,CAAUC,MAAOA,EAAOV,WAlC5B,SAAoBK,GAElB,IAAMyC,EAAQ,YAAOpC,GACfX,EAAO+C,EAASR,MAAK,SAAAvC,GAAI,OAAIA,EAAKM,KAAOA,KAC/CN,EAAKQ,UAAYR,EAAKQ,SACtBW,EAAS4B,IA6ByCnC,UArBpD,WACE,IAAMoC,EAAgB,YAAOrC,GAC7BqC,EAAiBC,SAAQ,SAAAjD,GAErBA,EAAKQ,UADHK,KAMNO,GAAcP,GACdM,EAAS6B,IAW+DnC,UAAWA,MChFvFqC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.b775cae0.chunk.js","sourcesContent":["import React, { useRef } from 'react'\n\nexport default function ToDo({ todo, toggleTodo }) {\n    const customCheckBox = useRef()\n\n    function handleCustomCheckBox() {\n        toggleTodo(todo.id)\n    }\n    return (\n        <div className='todo-item' onClick={handleCustomCheckBox}>\n\n            <div ref={customCheckBox} className='customCheckbox' >\n                {todo.complete ? '\\u2714' : null}\n            </div>\n            <label className={todo.complete ? 'completed' : null}  >\n                {/* <input type='checkbox' checked={todo.complete} onChange={handleTodoToggle} /> */}\n                {todo.name}\n            </label>\n        </div>\n    )\n}\n","import React, { useRef } from 'react'\nimport ToDo from './ToDo'\nexport default function ToDoList({ todos, toggleTodo, selectAll, isChecked }) {\n    const customCheckBox = useRef()\n    return (\n        <>\n            <div className='custom-check-box-container'>\n                <div ref={customCheckBox} className={todos.length > 1 ? 'customCheckbox' : 'hide'} onClick={selectAll}>\n                    {isChecked ? '\\u2714' : null}\n                </div>\n                <p>check all</p>\n            </div>\n            <div className='todo-container'>\n                {\n                    todos.map(todo => {\n                        return <ToDo key={todo.id} todo={todo} toggleTodo={toggleTodo} />\n                    })\n                }\n            </div>\n        </>\n    )\n}\n\n\n\n\n{/* <>\n<div className={todos.length > 1 ? 'checkAll' : 'checkAll hide'}>\n    <input type='checkbox' checked={isChecked} onChange={selectAll} /> select all\n</div>\n<div className='todo-container'>\n\n    {\n        todos.map(todo => {\n            return <ToDo key={todo.id} todo={todo} toggleTodo={toggleTodo} />\n        })\n    }\n</div>\n</> */}","import React, { useState, useRef, useEffect } from 'react';\n\nimport ToDoList from './ToDoList'\nimport './styles/app.css'\n\nconst LOCAL_STORAGE_KEY = 'todo.list'\nfunction random() {\n  return Math.random()\n}\nfunction App() {\n  const [todos, setTodos] = useState([])\n  const [isChecked, changeChecked] = useState(false)\n  const [showClearButton, changeClearButton] = useState(false)\n  const todoNameRef = useRef()\n\n  useEffect(() => {\n    // called only once to load in any saved todos from local storage \n    const storedTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY))\n    if (storedTodos) setTodos(storedTodos)\n  }, [])\n\n  useEffect(() => {\n    // update local storage when our state changes -- list of todos \n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos))\n    const anyCompletedItems = todos.find(todo => todo.complete)\n    if (anyCompletedItems) {\n      changeClearButton(true)\n    } else {\n      changeClearButton(false)\n    }\n  }, [todos])\n\n  function handleAddTodo() {\n    // Retrieve value in input, add to state, clear input value\n    const name = todoNameRef.current.value\n    if (name === '') return\n    setTodos(prevTodos => {\n      return [...prevTodos, {\n        id: random(),\n        name: name,\n        complete: false\n      }]\n    })\n    todoNameRef.current.value = ''\n  }\n  function handleKey(event) {\n    // keyCode 13 = 'Enter'\n    if (event.keyCode === 13) {\n      handleAddTodo()\n    }\n  }\n  function toggleTodo(id) {\n    // if todo item is not checked, check it. Else uncheck item\n    const newTodos = [...todos]\n    const todo = newTodos.find(todo => todo.id === id)\n    todo.complete = !todo.complete\n    setTodos(newTodos)\n  }\n\n  function handleCompleteItems() {\n    const clearedTodos = todos.filter(todo => !todo.complete)\n    changeChecked(false)\n    setTodos(clearedTodos)\n  }\n  function selectAll() {\n    const completeAllTodos = [...todos]\n    completeAllTodos.forEach(todo => {\n      if (isChecked) {\n        todo.complete = false\n      } else {\n        todo.complete = true\n      }\n    })\n    changeChecked(isChecked ? false : true)\n    setTodos(completeAllTodos)\n  }\n\n  return (\n    <div className=\"App\">\n      <input ref={todoNameRef} type='text' placeholder='add item' onKeyDown={handleKey} />\n      <div className='button-container'>\n        <button onClick={handleAddTodo}>add item</button>\n        {showClearButton ? <button onClick={handleCompleteItems}> clear complete </button> : null}\n      </div>\n      <div className='total-items'>{todos.length} items</div>\n      <ToDoList todos={todos} toggleTodo={toggleTodo} selectAll={selectAll} isChecked={isChecked} />\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}